name: Build
on:
  push:
    branches:
      - master
      - release-*
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_artifactory_user: '${{secrets.ARTIFACTORY_USER}}'
      ORG_GRADLE_PROJECT_artifactory_password: '${{secrets.ARTIFACTORY_TOKEN}}'
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v1
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.TOKEN }}

      - name: Fetch full history
        run: git fetch --prune --tags --unshallow

      - name: Determine build type
        id: build_type
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo "branch: $(git rev-parse --abbrev-ref HEAD)"

          if [[ ${{github.event_name }} = "pull_request" ]] ; then
            export BRANCH=${{ github.head_ref }}
          else
            export BRANCH=$(git rev-parse --abbrev-ref HEAD)
          fi

          # On PRs to release branches, build RC releases for target release branch
          if [[ "${{github.event_name }}" = "pull_request" && "${{ github.base_ref }}" =~ ^release-* ]]
          then
            echo "Building release candidate"
            export VERSION_TYPE=rc
            export BRANCH=${{ github.base_ref }}

          # On any build running on master branch, build RC versions
          elif [[ "${{ github.ref }}" = "refs/heads/master" ]]
          then
            echo "Building release candidate"
            export VERSION_TYPE=rc

          # On any build running on release branches, build final release
          elif [[ "${{ github.ref }}" =~ ^refs/heads/release-* ]]
          then
            echo "Building final release"
            export VERSION_TYPE=release

          else
            echo "Building snapshot"
            export VERSION_TYPE=snapshot
          fi

          version=$(./build-tools/version.sh)
          echo "Version: $version"

          # Make sure the version can be used as a tag
          git tag v$version
          git tag -d v$version

          echo "##[set-output name=version_type;]$VERSION_TYPE"
          echo "##[set-output name=branch;]$BRANCH"
          echo "##[set-output name=version;]$version"

      - name: Build
        run: |
          VERSION_TYPE=${{ steps.build_type.outputs.version_type }} BRANCH=${{ steps.build_type.outputs.branch }} ./gradlew releaseBundle -x test

      - name: Unit tests
        run: |
          VERSION_TYPE=${{ steps.build_type.outputs.version_type }} BRANCH=${{ steps.build_type.outputs.branch }} ./gradlew test --info

      - name: Build Image
        run: |
          VERSION_TYPE=${{ steps.build_type.outputs.version_type }} BRANCH=${{ steps.build_type.outputs.branch }} ./gradlew docker --info

      - name: Publish image
        if: steps.build_type.outputs.version_type == 'rc' || steps.build_type.outputs.version_type == 'release'
        run: |
          echo "Logging in to dockerhub"
          docker login -u '${{ secrets.DOCKERHUB_USER }}' -p '${{ secrets.DOCKERHUB_PASSWORD }}' docker.io
          VERSION_TYPE=${{ steps.build_type.outputs.version_type }} BRANCH=${{ steps.build_type.outputs.branch }} ./gradlew dockerPush

      - name: Push git tag
        if: steps.build_type.outputs.version_type == 'rc' || steps.build_type.outputs.version_type == 'release'
        run: |
          git tag v${{ steps.build_type.outputs.version }}
          git push origin v${{ steps.build_type.outputs.version }}

      - name: Create Release
        if: steps.build_type.outputs.version_type == 'release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.build_type.outputs.version }}
          release_name: v${{ steps.build_type.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload plugin
        id: upload-release-asset
        if: steps.build_type.outputs.version_type == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/distributions/eap-${{steps.build_type.outputs.version}}.zip
          asset_name: eap-${{steps.build_type.outputs.version}}.zip
          asset_content_type: application/zip

      - name: Add release to plugin repo
        id: add-release
        if: steps.build_type.outputs.version_type == 'release'
        run: |
          set -eu
          pi=Armory.EAP
          prp=build/distributions/plugins-remote.json
          pp=plugins.json
          ptp=plugins.json.tmp
          lpi=$(jq "[.[] | select(.id==\"${pi}\")] | length" ${pp})
          if [ -z "${lpi}" ]
          then
              echo "[]" > ${pp}
              lpi=0
          fi
          if [ ${lpi} == 0 ]
          then
              p=$(cat ${prp})
              jq ". += ${p}" ${pp} > ${ptp}
          else
              if [ ${lpi} == 1 ]
              then
                  pii=$(jq "map(.id==\"${pi}\") | index(true)" ${pp})
                  nr=$(jq "[.[] | select(.id==\"${pi}\").releases[0]]" ${prp})
                  nrv=$(echo ${nr} | jq -r '.[] | .version')
                  if [ -z "${nrv}" ] || [ ${nrv} == "null" ]
                  then
                      echo "Release version not found for the plugin id ${pi} inside ${prp}"
                      exit -1
                  else
                      lrs=$(jq "[.[] | select(.id==\"${pi}\").releases | .[] | select(.version==\"${nrv}\")] | length" ${pp})
                      if [ ${lrs} -ne 0 ]
                      then
                          rvi=$(jq ".[] | select(.id==\"${pi}\").releases | map(.version==\"${nrv}\") | index(true)" ${pp})
                          ren='^[0-9]+$'
                          while [[ ${rvi} =~ $ren ]] && [ ${rvi} -gt -1 ]
                          do
                              jq "del(.[${pii}].releases[${rvi}])" ${pp} > ${ptp}
                              mv ${ptp} ${pp}
                              rvi=$(jq ".[] | select(.id==\"${pi}\").releases | map(.version==\"${nrv}\") | index(true)" ${pp})
                          done
                      fi
                      jq ".[${pii}].releases += ${nr}" ${pp} > ${ptp}
                  fi
              else
                  echo "The ${pp} file must contain 0 or 1 plugin with the id ${pi}, but found ${lpi}"
                  exit ${lpi}
              fi
          fi
          mv ${ptp} ${pp}
      - name: Commit plugins.json
        uses: stefanzweifel/git-auto-commit-action@v4
        if: steps.build_type.outputs.version_type == 'release'
        with:
          branch: master
          push_options: '--force'
          commit_message: Update plugins.json
          commit_user_name: Release Bot
          commit_user_email: bot@armory.io
